/*! For license information please see bundle.js.LICENSE.txt */
(()=>{var e={437:(e,r,t)=>{var n,o=function(e){var r="b",t="w",n=-1,o="p",a="k",i="rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1",s=["1-0","0-1","1/2-1/2","*"],u={b:[16,32,17,15],w:[-16,-32,-17,-15]},f={n:[-18,-33,-31,-14,18,33,31,14],b:[-17,-15,17,15],r:[-16,1,16,-1],q:[-17,-16,-15,1,17,16,15,-1],k:[-17,-16,-15,1,17,16,15,-1]},p=[20,0,0,0,0,0,0,24,0,0,0,0,0,0,20,0,0,20,0,0,0,0,0,24,0,0,0,0,0,20,0,0,0,0,20,0,0,0,0,24,0,0,0,0,20,0,0,0,0,0,0,20,0,0,0,24,0,0,0,20,0,0,0,0,0,0,0,0,20,0,0,24,0,0,20,0,0,0,0,0,0,0,0,0,0,20,2,24,2,20,0,0,0,0,0,0,0,0,0,0,0,2,53,56,53,2,0,0,0,0,0,0,24,24,24,24,24,24,56,0,56,24,24,24,24,24,24,0,0,0,0,0,0,2,53,56,53,2,0,0,0,0,0,0,0,0,0,0,0,20,2,24,2,20,0,0,0,0,0,0,0,0,0,0,20,0,0,24,0,0,20,0,0,0,0,0,0,0,0,20,0,0,0,24,0,0,0,20,0,0,0,0,0,0,20,0,0,0,0,24,0,0,0,0,20,0,0,0,0,20,0,0,0,0,0,24,0,0,0,0,0,20,0,0,20,0,0,0,0,0,0,24,0,0,0,0,0,0,20],c=[17,0,0,0,0,0,0,16,0,0,0,0,0,0,15,0,0,17,0,0,0,0,0,16,0,0,0,0,0,15,0,0,0,0,17,0,0,0,0,16,0,0,0,0,15,0,0,0,0,0,0,17,0,0,0,16,0,0,0,15,0,0,0,0,0,0,0,0,17,0,0,16,0,0,15,0,0,0,0,0,0,0,0,0,0,17,0,16,0,15,0,0,0,0,0,0,0,0,0,0,0,0,17,16,15,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,-1,-1,-1,-1,-1,-1,-1,0,0,0,0,0,0,0,-15,-16,-17,0,0,0,0,0,0,0,0,0,0,0,0,-15,0,-16,0,-17,0,0,0,0,0,0,0,0,0,0,-15,0,0,-16,0,0,-17,0,0,0,0,0,0,0,0,-15,0,0,0,-16,0,0,0,-17,0,0,0,0,0,0,-15,0,0,0,0,-16,0,0,0,0,-17,0,0,0,0,-15,0,0,0,0,0,-16,0,0,0,0,0,-17,0,0,-15,0,0,0,0,0,0,-16,0,0,0,0,0,0,-17],l={p:0,n:1,b:2,r:3,q:4,k:5},h={NORMAL:"n",CAPTURE:"c",BIG_PAWN:"b",EP_CAPTURE:"e",PROMOTION:"p",KSIDE_CASTLE:"k",QSIDE_CASTLE:"q"},d={NORMAL:1,CAPTURE:2,BIG_PAWN:4,EP_CAPTURE:8,PROMOTION:16,KSIDE_CASTLE:32,QSIDE_CASTLE:64},v={a8:0,b8:1,c8:2,d8:3,e8:4,f8:5,g8:6,h8:7,a7:16,b7:17,c7:18,d7:19,e7:20,f7:21,g7:22,h7:23,a6:32,b6:33,c6:34,d6:35,e6:36,f6:37,g6:38,h6:39,a5:48,b5:49,c5:50,d5:51,e5:52,f5:53,g5:54,h5:55,a4:64,b4:65,c4:66,d4:67,e4:68,f4:69,g4:70,h4:71,a3:80,b3:81,c3:82,d3:83,e3:84,f3:85,g3:86,h3:87,a2:96,b2:97,c2:98,d2:99,e2:100,f2:101,g2:102,h2:103,a1:112,b1:113,c1:114,d1:115,e1:116,f1:117,g1:118,h1:119},g={w:[{square:v.a1,flag:d.QSIDE_CASTLE},{square:v.h1,flag:d.KSIDE_CASTLE}],b:[{square:v.a8,flag:d.QSIDE_CASTLE},{square:v.h8,flag:d.KSIDE_CASTLE}]},b=new Array(128),m={w:n,b:n},y=t,w={w:0,b:0},E=n,P=0,S=1,C=[],O={},_={};function x(e){void 0===e&&(e=!1),b=new Array(128),m={w:n,b:n},y=t,w={w:0,b:0},E=n,P=0,S=1,C=[],e||(O={}),_={},$(I())}function T(){for(var e=[],r={},t=function(e){e in _&&(r[e]=_[e])};C.length>0;)e.push(Y());for(t(I());e.length>0;)J(e.pop()),t(I());_=r}function A(){k(i)}function k(e,o){void 0===o&&(o=!1);var a=e.split(/\s+/),i=a[0],s=0;if(!q(e).valid)return!1;x(o);for(var u=0;u<i.length;u++){var f=i.charAt(u);if("/"===f)s+=8;else if(-1!=="0123456789".indexOf(f))s+=parseInt(f,10);else{var p=f<"a"?t:r;L({type:f.toLowerCase(),color:p},Z(s)),s++}}return y=a[1],a[2].indexOf("K")>-1&&(w.w|=d.KSIDE_CASTLE),a[2].indexOf("Q")>-1&&(w.w|=d.QSIDE_CASTLE),a[2].indexOf("k")>-1&&(w.b|=d.KSIDE_CASTLE),a[2].indexOf("q")>-1&&(w.b|=d.QSIDE_CASTLE),E="-"===a[3]?n:v[a[3]],P=parseInt(a[4],10),S=parseInt(a[5],10),$(I()),!0}function q(e){var r=e.split(/\s+/);if(6!==r.length)return{valid:!1,error_number:1,error:"FEN string must contain six space-delimited fields."};if(isNaN(r[5])||parseInt(r[5],10)<=0)return{valid:!1,error_number:2,error:"6th field (move number) must be a positive integer."};if(isNaN(r[4])||parseInt(r[4],10)<0)return{valid:!1,error_number:3,error:"5th field (half move counter) must be a non-negative integer."};if(!/^(-|[abcdefgh][36])$/.test(r[3]))return{valid:!1,error_number:4,error:"4th field (en-passant square) is invalid."};if(!/^(KQ?k?q?|Qk?q?|kq?|q|-)$/.test(r[2]))return{valid:!1,error_number:5,error:"3rd field (castling availability) is invalid."};if(!/^(w|b)$/.test(r[1]))return{valid:!1,error_number:6,error:"2nd field (side to move) is invalid."};var t=r[0].split("/");if(8!==t.length)return{valid:!1,error_number:7,error:"1st field (piece positions) does not contain 8 '/'-delimited rows."};for(var n=0;n<t.length;n++){for(var o=0,a=!1,i=0;i<t[n].length;i++)if(isNaN(t[n][i])){if(!/^[prnbqkPRNBQK]$/.test(t[n][i]))return{valid:!1,error_number:9,error:"1st field (piece positions) is invalid [invalid piece]."};o+=1,a=!1}else{if(a)return{valid:!1,error_number:8,error:"1st field (piece positions) is invalid [consecutive numbers]."};o+=parseInt(t[n][i],10),a=!0}if(8!==o)return{valid:!1,error_number:10,error:"1st field (piece positions) is invalid [row too large]."}}return"3"==r[3][1]&&"w"==r[1]||"6"==r[3][1]&&"b"==r[1]?{valid:!1,error_number:11,error:"Illegal en-passant square"}:{valid:!0,error_number:0,error:"No errors."}}function I(){for(var e=0,r="",o=v.a8;o<=v.h1;o++){if(null==b[o])e++;else{e>0&&(r+=e,e=0);var a=b[o].color,i=b[o].type;r+=a===t?i.toUpperCase():i.toLowerCase()}o+1&136&&(e>0&&(r+=e),o!==v.h1&&(r+="/"),e=0,o+=8)}var s="";w.w&d.KSIDE_CASTLE&&(s+="K"),w.w&d.QSIDE_CASTLE&&(s+="Q"),w.b&d.KSIDE_CASTLE&&(s+="k"),w.b&d.QSIDE_CASTLE&&(s+="q"),s=s||"-";var u=E===n?"-":Z(E);return[r,y,s,u,P,S].join(" ")}function N(e){for(var r=0;r<e.length;r+=2)"string"==typeof e[r]&&"string"==typeof e[r+1]&&(O[e[r]]=e[r+1]);return O}function $(e){C.length>0||(e!==i?(O.SetUp="1",O.FEN=e):(delete O.SetUp,delete O.FEN))}function R(e){var r=b[v[e]];return r?{type:r.type,color:r.color}:null}function L(e,r){if(!("type"in e)||!("color"in e))return!1;if(-1==="pnbrqkPNBRQK".indexOf(e.type.toLowerCase()))return!1;if(!(r in v))return!1;var t=v[r];return(e.type!=a||m[e.color]==n||m[e.color]==t)&&(b[t]={type:e.type,color:e.color},e.type===a&&(m[e.color]=t),$(I()),!0)}function D(e,r,t,n,a){var i={color:y,from:r,to:t,flags:n,piece:e[r].type};return a&&(i.flags|=d.PROMOTION,i.promotion=a),e[t]?i.captured=e[t].type:n&d.EP_CAPTURE&&(i.captured=o),i}function B(e){function r(e,r,t,n,a){if(e[t].type!==o||0!==z(n)&&7!==z(n))r.push(D(e,t,n,a));else for(var i=["q","r","b","n"],s=0,u=i.length;s<u;s++)r.push(D(e,t,n,a,i[s]))}var t=[],n=y,i=ee(n),s={b:1,w:6},p=v.a8,c=v.h1,l=!1,h=void 0===e||!("legal"in e)||e.legal,g=void 0===e||!("piece"in e)||"string"!=typeof e.piece||e.piece.toLowerCase();if(void 0!==e&&"square"in e){if(!(e.square in v))return[];p=c=v[e.square],l=!0}for(var P=p;P<=c;P++)if(136&P)P+=7;else{var S=b[P];if(null!=S&&S.color===n)if(S.type!==o||!0!==g&&g!==o){if(!0===g||g===S.type)for(var C=0,O=f[S.type].length;C<O;C++){var _=f[S.type][C];for(x=P;!(136&(x+=_));){if(null!=b[x]){if(b[x].color===n)break;r(b,t,P,x,d.CAPTURE);break}if(r(b,t,P,x,d.NORMAL),"n"===S.type||"k"===S.type)break}}}else{var x=P+u[n][0];if(null==b[x]){r(b,t,P,x,d.NORMAL);x=P+u[n][1];s[n]===z(P)&&null==b[x]&&r(b,t,P,x,d.BIG_PAWN)}for(C=2;C<4;C++)136&(x=P+u[n][C])||(null!=b[x]&&b[x].color===i?r(b,t,P,x,d.CAPTURE):x===E&&r(b,t,P,E,d.EP_CAPTURE))}}if(!(!0!==g&&g!==a||l&&c!==m[n])){if(w[n]&d.KSIDE_CASTLE){var T=(A=m[n])+2;null!=b[A+1]||null!=b[T]||Q(i,m[n])||Q(i,A+1)||Q(i,T)||r(b,t,m[n],T,d.KSIDE_CASTLE)}var A;if(w[n]&d.QSIDE_CASTLE)T=(A=m[n])-2,null!=b[A-1]||null!=b[A-2]||null!=b[A-3]||Q(i,m[n])||Q(i,A-1)||Q(i,T)||r(b,t,m[n],T,d.QSIDE_CASTLE)}if(!h)return t;var k=[];for(P=0,O=t.length;P<O;P++)J(t[P]),K(n)||k.push(t[P]),Y();return k}function M(e,r){var t="";if(e.flags&d.KSIDE_CASTLE)t="O-O";else if(e.flags&d.QSIDE_CASTLE)t="O-O-O";else{if(e.piece!==o){var n=function(e,r){for(var t=e.from,n=e.to,o=e.piece,a=0,i=0,s=0,u=0,f=r.length;u<f;u++){var p=r[u].from,c=r[u].to;o===r[u].piece&&t!==p&&n===c&&(a++,z(t)===z(p)&&i++,H(t)===H(p)&&s++)}return a>0?i>0&&s>0?Z(t):s>0?Z(t).charAt(1):Z(t).charAt(0):""}(e,r);t+=e.piece.toUpperCase()+n}e.flags&(d.CAPTURE|d.EP_CAPTURE)&&(e.piece===o&&(t+=Z(e.from)[0]),t+="x"),t+=Z(e.to),e.flags&d.PROMOTION&&(t+="="+e.promotion.toUpperCase())}return J(e),j()&&(W()?t+="#":t+="+"),Y(),t}function U(e){return e.replace(/=/,"").replace(/[+#]?[?!]*$/,"")}function Q(e,n){for(var a=v.a8;a<=v.h1;a++)if(136&a)a+=7;else if(null!=b[a]&&b[a].color===e){var i=b[a],s=a-n,u=s+119;if(p[u]&1<<l[i.type]){if(i.type===o){if(s>0){if(i.color===t)return!0}else if(i.color===r)return!0;continue}if("n"===i.type||"k"===i.type)return!0;for(var f=c[u],h=a+f,d=!1;h!==n;){if(null!=b[h]){d=!0;break}h+=f}if(!d)return!0}}return!1}function K(e){return Q(ee(e),m[e])}function j(){return K(y)}function W(){return j()&&0===B().length}function V(){return!j()&&0===B().length}function X(){for(var e={},r=[],t=0,n=0,o=v.a8;o<=v.h1;o++)if(n=(n+1)%2,136&o)o+=7;else{var a=b[o];a&&(e[a.type]=a.type in e?e[a.type]+1:1,"b"===a.type&&r.push(n),t++)}if(2===t)return!0;if(3===t&&(1===e.b||1===e.n))return!0;if(t===e.b+2){var i=0,s=r.length;for(o=0;o<s;o++)i+=r[o];if(0===i||i===s)return!0}return!1}function G(){for(var e=[],r={},t=!1;;){var n=Y();if(!n)break;e.push(n)}for(;;){var o=I().split(" ").slice(0,4).join(" ");if(r[o]=o in r?r[o]+1:1,r[o]>=3&&(t=!0),!e.length)break;J(e.pop())}return t}function J(e){var t=y,i=ee(t);if(function(e){C.push({move:e,kings:{b:m.b,w:m.w},turn:y,castling:{b:w.b,w:w.w},ep_square:E,half_moves:P,move_number:S})}(e),b[e.to]=b[e.from],b[e.from]=null,e.flags&d.EP_CAPTURE&&(y===r?b[e.to-16]=null:b[e.to+16]=null),e.flags&d.PROMOTION&&(b[e.to]={type:e.promotion,color:t}),b[e.to].type===a){if(m[b[e.to].color]=e.to,e.flags&d.KSIDE_CASTLE){var s=e.to-1,u=e.to+1;b[s]=b[u],b[u]=null}else e.flags&d.QSIDE_CASTLE&&(s=e.to+1,u=e.to-2,b[s]=b[u],b[u]=null);w[t]=""}if(w[t])for(var f=0,p=g[t].length;f<p;f++)if(e.from===g[t][f].square&&w[t]&g[t][f].flag){w[t]^=g[t][f].flag;break}if(w[i])for(f=0,p=g[i].length;f<p;f++)if(e.to===g[i][f].square&&w[i]&g[i][f].flag){w[i]^=g[i][f].flag;break}E=e.flags&d.BIG_PAWN?"b"===y?e.to-16:e.to+16:n,e.piece===o||e.flags&(d.CAPTURE|d.EP_CAPTURE)?P=0:P++,y===r&&S++,y=ee(y)}function Y(){var e=C.pop();if(null==e)return null;var t=e.move;m=e.kings,y=e.turn,w=e.castling,E=e.ep_square,P=e.half_moves,S=e.move_number;var n,a,i=y,s=ee(y);if(b[t.from]=b[t.to],b[t.from].type=t.piece,b[t.to]=null,t.flags&d.CAPTURE)b[t.to]={type:t.captured,color:s};else if(t.flags&d.EP_CAPTURE){var u;u=i===r?t.to-16:t.to+16,b[u]={type:o,color:s}}return t.flags&(d.KSIDE_CASTLE|d.QSIDE_CASTLE)&&(t.flags&d.KSIDE_CASTLE?(n=t.to+1,a=t.to-1):t.flags&d.QSIDE_CASTLE&&(n=t.to-2,a=t.to+1),b[n]=b[a],b[a]=null),t}function F(e,r){var t=U(e);if(r){var n=t.match(/([pnbrqkPNBRQK])?([a-h][1-8])x?-?([a-h][1-8])([qrbnQRBN])?/);if(n)var i=n[1],s=n[2],u=n[3],f=n[4]}var p=function(e){var r=e.charAt(0);if(r>="a"&&r<="h"){if(e.match(/[a-h]\d.*[a-h]\d/))return;return o}return"o"===(r=r.toLowerCase())?a:r}(t),c=null,l=B({legal:!0,piece:i||p});if(c=l,r){var h=B({legal:!1,piece:i||p});c=h}for(var d=0,g=c.length;d<g;d++){if(t===U(M(c[d],l))||r&&t===U(M(c[d],h)))return c[d];if(n&&(!i||i.toLowerCase()==c[d].piece)&&v[s]==c[d].from&&v[u]==c[d].to&&(!f||f.toLowerCase()==c[d].promotion))return c[d]}return null}function z(e){return e>>4}function H(e){return 15&e}function Z(e){var r=H(e),t=z(e);return"abcdefgh".substring(r,r+1)+"87654321".substring(t,t+1)}function ee(e){return e===t?r:t}function re(e){var r=te(e);r.san=M(r,B({legal:!0})),r.to=Z(r.to),r.from=Z(r.from);var t="";for(var n in d)d[n]&r.flags&&(t+=h[n]);return r.flags=t,r}function te(e){var r=e instanceof Array?[]:{};for(var t in e)r[t]="object"==typeof t?te(e[t]):e[t];return r}function ne(e){return e.replace(/^\s+|\s+$/g,"")}function oe(e){for(var r=B({legal:!1}),t=0,n=y,o=0,a=r.length;o<a;o++)J(r[o]),K(n)||(e-1>0?t+=oe(e-1):t++),Y();return t}return k(void 0===e?i:e),{WHITE:t,BLACK:r,PAWN:o,KNIGHT:"n",BISHOP:"b",ROOK:"r",QUEEN:"q",KING:a,SQUARES:function(){for(var e=[],r=v.a8;r<=v.h1;r++)136&r?r+=7:e.push(Z(r));return e}(),FLAGS:h,load:function(e){return k(e)},reset:function(){return A()},moves:function(e){for(var r=B(e),t=[],n=0,o=r.length;n<o;n++)void 0!==e&&"verbose"in e&&e.verbose?t.push(re(r[n])):t.push(M(r[n],B({legal:!0})));return t},in_check:function(){return j()},in_checkmate:function(){return W()},in_stalemate:function(){return V()},in_draw:function(){return P>=100||V()||X()||G()},insufficient_material:function(){return X()},in_threefold_repetition:function(){return G()},game_over:function(){return P>=100||W()||V()||X()||G()},validate_fen:function(e){return q(e)},fen:function(){return I()},board:function(){for(var e=[],r=[],t=v.a8;t<=v.h1;t++)null==b[t]?r.push(null):r.push({type:b[t].type,color:b[t].color}),t+1&136&&(e.push(r),r=[],t+=8);return e},pgn:function(e){var r="object"==typeof e&&"string"==typeof e.newline_char?e.newline_char:"\n",t="object"==typeof e&&"number"==typeof e.max_width?e.max_width:0,n=[],o=!1;for(var a in O)n.push("["+a+' "'+O[a]+'"]'+r),o=!0;o&&C.length&&n.push(r);for(var i=function(e){var r=_[I()];return void 0!==r&&(e=`${e}${e.length>0?" ":""}{${r}}`),e},s=[];C.length>0;)s.push(Y());var u=[],f="";for(0===s.length&&u.push(i(""));s.length>0;){f=i(f);var p=s.pop();C.length||"b"!==p.color?"w"===p.color&&(f.length&&u.push(f),f=S+"."):f=S+". ...",f=f+" "+M(p,B({legal:!1})),J(p)}if(f.length&&u.push(i(f)),void 0!==O.Result&&u.push(O.Result),0===t)return n.join("")+u.join(" ");var c=function(){return n.length>0&&" "===n[n.length-1]&&(n.pop(),!0)},l=function(e,o){for(var a of o.split(" "))if(a){if(e+a.length>t){for(;c();)e--;n.push(r),e=0}n.push(a),e+=a.length,n.push(" "),e++}return c()&&e--,e},h=0;for(a=0;a<u.length;a++)h+u[a].length>t&&u[a].includes("{")?h=l(h,u[a]):(h+u[a].length>t&&0!==a?(" "===n[n.length-1]&&n.pop(),n.push(r),h=0):0!==a&&(n.push(" "),h++),n.push(u[a]),h+=u[a].length);return n.join("")},load_pgn:function(e,r){var t=void 0!==r&&"sloppy"in r&&r.sloppy;function n(e){return e.replace(/\\/g,"\\")}var o="object"==typeof r&&"string"==typeof r.newline_char?r.newline_char:"\r?\n",a=new RegExp("^(\\[((?:"+n(o)+")|.)*\\])(?:"+n(o)+"){2}"),i=a.test(e)?a.exec(e)[1]:"";A();var u=function(e,r){for(var t="object"==typeof r&&"string"==typeof r.newline_char?r.newline_char:"\r?\n",o={},a=e.split(new RegExp(n(t))),i="",s="",u=0;u<a.length;u++)i=a[u].replace(/^\[([A-Z][A-Za-z]*)\s.*\]$/,"$1"),s=a[u].replace(/^\[[A-Za-z]+\s"(.*)"\ *\]$/,"$1"),ne(i).length>0&&(o[i]=s);return o}(i,r);for(var f in u)N([f,u[f]]);if(!("1"!==u.SetUp||"FEN"in u&&k(u.FEN,!0)))return!1;for(var p=function(e){return`{${function(e){return Array.from(e).map((function(e){return e.charCodeAt(0)<128?e.charCodeAt(0).toString(16):encodeURIComponent(e).replace(/\%/g,"").toLowerCase()})).join("")}((e=e.replace(new RegExp(n(o),"g")," ")).slice(1,e.length-1))}}`},c=function(e){if(e.startsWith("{")&&e.endsWith("}"))return function(e){return 0==e.length?"":decodeURIComponent("%"+e.match(/.{1,2}/g).join("%"))}(e.slice(1,e.length-1))},l=e.replace(i,"").replace(new RegExp(`({[^}]*})+?|;([^${n(o)}]*)`,"g"),(function(e,r,t){return void 0!==r?p(r):" "+p(`{${t.slice(1)}}`)})).replace(new RegExp(n(o),"g")," "),h=/(\([^\(\)]+\))+?/g;h.test(l);)l=l.replace(h,"");var d=ne(l=(l=(l=l.replace(/\d+\.(\.\.)?/g,"")).replace(/\.\.\./g,"")).replace(/\$\d+/g,"")).split(new RegExp(/\s+/));d=d.join(",").replace(/,,+/g,",").split(",");for(var v="",g=0;g<d.length-1;g++){var b=c(d[g]);if(void 0===b){if(null==(v=F(d[g],t)))return!1;J(v)}else _[I()]=b}if(void 0!==(b=c(d[d.length-1]))&&(_[I()]=b,d.pop()),v=d[d.length-1],s.indexOf(v)>-1)(function(e){for(var r in e)return!0;return!1})(O)&&void 0===O.Result&&N(["Result",v]);else{if(null==(v=F(v,t)))return!1;J(v)}return!0},header:function(){return N(arguments)},ascii:function(){return function(){for(var e="   +------------------------+\n",r=v.a8;r<=v.h1;r++){if(0===H(r)&&(e+=" "+"87654321"[z(r)]+" |"),null==b[r])e+=" . ";else{var n=b[r].type;e+=" "+(b[r].color===t?n.toUpperCase():n.toLowerCase())+" "}r+1&136&&(e+="|\n",r+=8)}return(e+="   +------------------------+\n")+"     a  b  c  d  e  f  g  h\n"}()},turn:function(){return y},move:function(e,r){var t=void 0!==r&&"sloppy"in r&&r.sloppy,n=null;if("string"==typeof e)n=F(e,t);else if("object"==typeof e)for(var o=B(),a=0,i=o.length;a<i;a++)if(e.from===Z(o[a].from)&&e.to===Z(o[a].to)&&(!("promotion"in o[a])||e.promotion===o[a].promotion)){n=o[a];break}if(!n)return null;var s=re(n);return J(n),s},undo:function(){var e=Y();return e?re(e):null},clear:function(){return x()},put:function(e,r){return L(e,r)},get:function(e){return R(e)},remove:function(e){return function(e){var r=R(e);return b[v[e]]=null,r&&r.type===a&&(m[r.color]=n),$(I()),r}(e)},perft:function(e){return oe(e)},square_color:function(e){if(e in v){var r=v[e];return(z(r)+H(r))%2==0?"light":"dark"}return null},history:function(e){for(var r=[],t=[],n=(void 0!==e&&"verbose"in e&&e.verbose);C.length>0;)r.push(Y());for(;r.length>0;){var o=r.pop();n?t.push(re(o)):t.push(M(o,B({legal:!0}))),J(o)}return t},get_comment:function(){return _[I()]},set_comment:function(e){_[I()]=e.replace("{","[").replace("}","]")},delete_comment:function(){var e=_[I()];return delete _[I()],e},get_comments:function(){return T(),Object.keys(_).map((function(e){return{fen:e,comment:_[e]}}))},delete_comments:function(){return T(),Object.keys(_).map((function(e){var r=_[e];return delete _[e],{fen:e,comment:r}}))}}};r.Chess=o,void 0===(n=function(){return o}.call(r,t,r,e))||(e.exports=n)},456:e=>{var r="abcdefgh".split("");function t(e){if("string"!=typeof e)return!1;var r=e.split("-");return 2===r.length&&!0===n(r[0])&&!0===n(r[1])}function n(e){return"string"==typeof e&&-1!==e.search(/^[a-h][1-8]$/)}function o(e){if("string"!=typeof e)return!1;var r=(e=e.replace(/ .+$/,"")).split("/");if(8!==r.length)return!1;for(var t=0;t<8;t++)if(""===r[t]||r[t].length>8||-1!==r[t].search(/[^kqrbnpKQRNBP1-8]/))return!1;return!0}function a(e){if("object"!=typeof e)return!1;for(var r in e)if(!0===e.hasOwnProperty(r)&&(!0!==n(r)||1!=("string"==typeof(t=e[r])&&-1!==t.search(/^[bw][KQRNBP]$/))))return!1;var t;return!0}function i(e){if(!0!==o(e))return!1;for(var t,n=(e=e.replace(/ .+$/,"")).split("/"),a={},i=8,s=0;s<8;s++){for(var u=n[s].split(""),f=0,p=0;p<u.length;p++)-1!==u[p].search(/[1-8]/)?f+=parseInt(u[p],10):(a[r[f]+i]=(t=u[p]).toLowerCase()===t?"b"+t.toUpperCase():"w"+t.toUpperCase(),f++);i--}return a}function s(e){if(!0!==a(e))return!1;for(var t,n="",o=8,i=0;i<8;i++){for(var s=0;s<8;s++){var u=r[s]+o;!0===e.hasOwnProperty(u)?n+=(t=void 0,"w"===(t=e[u].split(""))[0]?t[1].toUpperCase():t[1].toLowerCase()):n+="1"}7!==i&&(n+="/"),o--}return(n=(n=(n=(n=(n=(n=n.replace(/11111111/g,"8")).replace(/1111111/g,"7")).replace(/111111/g,"6")).replace(/11111/g,"5")).replace(/1111/g,"4")).replace(/111/g,"3")).replace(/11/g,"2")}var u=function(e,u){u=u||{};var f,p,c,l,h,d,v,g,b,m,y=i("rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR"),w={alpha:"alpha-d2270",black:"black-3c85d",board:"board-b72b1",chessboard:"chessboard-63f37",clearfix:"clearfix-7da63",highlight1:"highlight1-32417",highlight2:"highlight2-9c5d2",notation:"notation-322f9",numeric:"numeric-fc462",piece:"piece-417db",row:"row-5277c",sparePieces:"spare-pieces-7492f",sparePiecesBottom:"spare-pieces-bottom-ae20f",sparePiecesTop:"spare-pieces-top-4028b",square:"square-55d63",white:"white-1e1d7"},E={},P=2,S="white",C={},O=!1,_={},x={};function T(){return"xxxx-xxxx-xxxx-xxxx-xxxx-xxxx-xxxx-xxxx".replace(/x/g,(function(e){return(16*Math.random()|0).toString(16)}))}function A(e){return JSON.parse(JSON.stringify(e))}function k(e){var r=e.split(".");return{major:parseInt(r[0],10),minor:parseInt(r[1],10),patch:parseInt(r[2],10)}}function q(e,r,t){if(!0===u.hasOwnProperty("showErrors")&&!1!==u.showErrors){var n="ChessBoard Error "+e+": "+r;return"console"===u.showErrors&&"object"==typeof console&&"function"==typeof console.log?(console.log(n),void(arguments.length>=2&&console.log(t))):"alert"===u.showErrors?(t&&(n+="\n\n"+JSON.stringify(t)),void window.alert(n)):void("function"==typeof u.showErrors&&u.showErrors(e,r,t))}}function I(e){return"fast"===e||"slow"===e||parseInt(e,10)+""==e+""&&e>=0}function N(e){return"function"==typeof u.pieceTheme?u.pieceTheme(e):"string"==typeof u.pieceTheme?u.pieceTheme.replace(/{piece}/g,e):(q(8272,"Unable to build image source for cfg.pieceTheme."),"")}function R(e,r,t){var n='<img src="'+N(e)+'" ';return t&&"string"==typeof t&&(n+='id="'+t+'" '),n+='alt="" class="'+w.piece+'" data-piece="'+e+'" style="width: '+d+"px;height: "+d+"px;",!0===r&&(n+="display:none;"),n+'" />'}function L(e){var r=["wK","wQ","wR","wB","wN","wP"];"black"===e&&(r=["bK","bQ","bR","bB","bN","bP"]);for(var t="",n=0;n<r.length;n++)t+=R(r[n],!1,_[r[n]]);return t}function D(e,r,t,n){var o=$("#"+x[e]),a=o.offset(),i=$("#"+x[r]),s=i.offset(),f=T();$("body").append(R(t,!0,f));var p=$("#"+f);p.css({display:"",position:"absolute",top:a.top,left:a.left}),o.find("."+w.piece).remove();var c={duration:u.moveSpeed,complete:function(){i.append(R(t)),p.remove(),"function"==typeof n&&n()}};p.animate(s,c)}function B(e,r,t){var n=$("#"+_[e]).offset(),o=$("#"+x[r]),a=o.offset(),i=T();$("body").append(R(e,!0,i));var s=$("#"+i);s.css({display:"",position:"absolute",left:n.left,top:n.top});var f={duration:u.moveSpeed,complete:function(){o.find("."+w.piece).remove(),o.append(R(e)),s.remove(),"function"==typeof t&&t()}};s.animate(a,f)}function M(e,r,t){if(0!==e.length)for(var n=0,o=0;o<e.length;o++)"clear"===e[o].type&&$("#"+x[e[o].square]+" ."+w.piece).fadeOut(u.trashSpeed,a),"add"===e[o].type&&!0!==u.sparePieces&&$("#"+x[e[o].square]).append(R(e[o].piece,!0)).find("."+w.piece).fadeIn(u.appearSpeed,a),"add"===e[o].type&&!0===u.sparePieces&&B(e[o].piece,e[o].square,a),"move"===e[o].type&&D(e[o].source,e[o].destination,e[o].piece,a);function a(){++n===e.length&&(j(),!0===u.hasOwnProperty("onMoveEnd")&&"function"==typeof u.onMoveEnd&&u.onMoveEnd(A(r),A(t)))}}function U(e,t){e=e.split("");var n=r.indexOf(e[0])+1,o=parseInt(e[1],10);t=t.split("");var a=r.indexOf(t[0])+1,i=parseInt(t[1],10),s=Math.abs(n-a),u=Math.abs(o-i);return s>=u?s:u}function Q(e,t,n){for(var o=function(e){for(var t=[],n=0;n<8;n++)for(var o=0;o<8;o++){var a=r[n]+(o+1);e!==a&&t.push({square:a,distance:U(e,a)})}t.sort((function(e,r){return e.distance-r.distance}));var i=[];for(n=0;n<t.length;n++)i.push(t[n].square);return i}(n),a=0;a<o.length;a++){var i=o[a];if(!0===e.hasOwnProperty(i)&&e[i]===t)return i}return!1}function K(e,r){e=A(e),r=A(r);var t=[],n={};for(var o in r)!0===r.hasOwnProperty(o)&&!0===e.hasOwnProperty(o)&&e[o]===r[o]&&(delete e[o],delete r[o]);for(var o in r)if(!0===r.hasOwnProperty(o)){var a=Q(e,r[o],o);!1!==a&&(t.push({type:"move",source:a,destination:o,piece:r[o]}),delete e[a],delete r[o],n[o]=!0)}for(var o in r)!0===r.hasOwnProperty(o)&&(t.push({type:"add",square:o,piece:r[o]}),delete r[o]);for(var o in e)!0===e.hasOwnProperty(o)&&!0!==n.hasOwnProperty(o)&&(t.push({type:"clear",square:o,piece:e[o]}),delete e[o]);return t}function j(){for(var e in p.find("."+w.piece).remove(),C)!0===C.hasOwnProperty(e)&&$("#"+x[e]).append(R(C[e]))}function W(){p.html(function(e){"black"!==e&&(e="white");var t="",n=A(r),o=8;"black"===e&&(n.reverse(),o=1);for(var a="white",i=0;i<8;i++){t+='<div class="'+w.row+'">';for(var s=0;s<8;s++){var f=n[s]+o;t+='<div class="'+w.square+" "+w[a]+" square-"+f+'" style="width: '+d+"px; height: "+d+'px" id="'+x[f]+'" data-square="'+f+'">',!0===u.showNotation&&(("white"===e&&1===o||"black"===e&&8===o)&&(t+='<div class="'+w.notation+" "+w.alpha+'">'+n[s]+"</div>"),0===s&&(t+='<div class="'+w.notation+" "+w.numeric+'">'+o+"</div>")),t+="</div>",a="white"===a?"black":"white"}t+='<div class="'+w.clearfix+'"></div></div>',a="white"===a?"black":"white","white"===e?o--:o++}return t}(S)),j(),!0===u.sparePieces&&("white"===S?(l.html(L("black")),h.html(L("white"))):(l.html(L("white")),h.html(L("black"))))}function V(e,r){for(var t in e=A(e),r)if(!0===r.hasOwnProperty(t)&&!0===e.hasOwnProperty(t)){var n=e[t];delete e[t],e[r[t]]=n}return e}function X(e){var r=A(C),t=A(e);s(r)!==s(t)&&(!0===u.hasOwnProperty("onChange")&&"function"==typeof u.onChange&&u.onChange(r,t),C=e)}function G(e,r){for(var t in m)if(!0===m.hasOwnProperty(t)){var n=m[t];if(e>=n.left&&e<n.left+d&&r>=n.top&&r<n.top+d)return t}return"offboard"}function J(){p.find("."+w.square).removeClass(w.highlight1+" "+w.highlight2)}function Y(){J();var e=A(C);delete e[b],X(e),j(),c.fadeOut(u.trashSpeed),O=!1}function F(e,r,t,n){"function"==typeof u.onDragStart&&!1===u.onDragStart(e,r,A(C),S)||(O=!0,v=r,b=e,g="spare"===e?"offboard":e,function(){for(var e in m={},x)!0===x.hasOwnProperty(e)&&(m[e]=$("#"+x[e]).offset())}(),c.attr("src",N(r)).css({display:"",position:"absolute",left:t-d/2,top:n-d/2}),"spare"!==e&&$("#"+x[e]).addClass(w.highlight1).find("."+w.piece).css("display","none"))}function z(e,r){c.css({left:e-d/2,top:r-d/2});var t=G(e,r);t!==g&&(!0===n(g)&&$("#"+x[g]).removeClass(w.highlight2),!0===n(t)&&$("#"+x[t]).addClass(w.highlight2),"function"==typeof u.onDragMove&&u.onDragMove(t,g,b,v,A(C),S),g=t)}function H(e){var r="drop";if("offboard"===e&&"snapback"===u.dropOffBoard&&(r="snapback"),"offboard"===e&&"trash"===u.dropOffBoard&&(r="trash"),!0===u.hasOwnProperty("onDrop")&&"function"==typeof u.onDrop){var t=A(C);"spare"===b&&!0===n(e)&&(t[e]=v),!0===n(b)&&"offboard"===e&&delete t[b],!0===n(b)&&!0===n(e)&&(delete t[b],t[e]=v);var o=A(C),a=u.onDrop(b,e,v,t,o,S);"snapback"!==a&&"trash"!==a||(r=a)}"snapback"===r?function(){if("spare"!==b){J();var e=$("#"+x[b]).offset(),r={duration:u.snapbackSpeed,complete:function(){j(),c.css("display","none"),!0===u.hasOwnProperty("onSnapbackEnd")&&"function"==typeof u.onSnapbackEnd&&u.onSnapbackEnd(v,b,A(C),S)}};c.animate(e,r),O=!1}else Y()}():"trash"===r?Y():"drop"===r&&function(e){J();var r=A(C);delete r[b],r[e]=v,X(r);var t=$("#"+x[e]).offset(),n={duration:u.snapSpeed,complete:function(){j(),c.css("display","none"),!0===u.hasOwnProperty("onSnapEnd")&&"function"==typeof u.onSnapEnd&&u.onSnapEnd(b,e,v)}};c.animate(t,n),O=!1}(e)}function Z(e){e.preventDefault()}function ee(e){if(!0===u.draggable){var r=$(this).attr("data-square");!0===n(r)&&!0===C.hasOwnProperty(r)&&F(r,C[r],e.pageX,e.pageY)}}function re(e){if(!0===u.draggable){var r=$(this).attr("data-square");!0===n(r)&&!0===C.hasOwnProperty(r)&&(e=e.originalEvent,F(r,C[r],e.changedTouches[0].pageX,e.changedTouches[0].pageY))}}function te(e){!0===u.sparePieces&&F("spare",$(this).attr("data-piece"),e.pageX,e.pageY)}function ne(e){!0===u.sparePieces&&F("spare",$(this).attr("data-piece"),(e=e.originalEvent).changedTouches[0].pageX,e.changedTouches[0].pageY)}function oe(e){!0===O&&z(e.pageX,e.pageY)}function ae(e){!0===O&&(e.preventDefault(),z(e.originalEvent.changedTouches[0].pageX,e.originalEvent.changedTouches[0].pageY))}function ie(e){!0===O&&H(G(e.pageX,e.pageY))}function se(e){!0===O&&H(G(e.originalEvent.changedTouches[0].pageX,e.originalEvent.changedTouches[0].pageY))}function ue(e){if(!1===O&&!0===u.hasOwnProperty("onMouseoverSquare")&&"function"==typeof u.onMouseoverSquare){var r=$(e.currentTarget).attr("data-square");if(!0===n(r)){var t=!1;!0===C.hasOwnProperty(r)&&(t=C[r]),u.onMouseoverSquare(r,t,A(C),S)}}}function fe(e){if(!1===O&&!0===u.hasOwnProperty("onMouseoutSquare")&&"function"==typeof u.onMouseoutSquare){var r=$(e.currentTarget).attr("data-square");if(!0===n(r)){var t=!1;!0===C.hasOwnProperty(r)&&(t=C[r]),u.onMouseoutSquare(r,t,A(C),S)}}}return E.clear=function(e){E.position({},e)},E.destroy=function(){f.html(""),c.remove(),f.unbind()},E.fen=function(){return E.position("fen")},E.flip=function(){return E.orientation("flip")},E.move=function(){if(0!==arguments.length){for(var e=!0,r={},n=0;n<arguments.length;n++)if(!1!==arguments[n])if(!0===t(arguments[n])){var o=arguments[n].split("-");r[o[0]]=o[1]}else q(2826,"Invalid move passed to the move method.",arguments[n]);else e=!1;var a=V(C,r);return E.position(a,e),a}},E.orientation=function(e){return 0===arguments.length?S:"white"===e||"black"===e?(S=e,W(),S):"flip"===e?(S="white"===S?"black":"white",W(),S):void q(5482,"Invalid value passed to the orientation method.",e)},E.position=function(e,r){return 0===arguments.length?A(C):"string"==typeof e&&"fen"===e.toLowerCase()?s(C):(!1!==r&&(r=!0),"string"==typeof e&&"start"===e.toLowerCase()&&(e=A(y)),!0===o(e)&&(e=i(e)),void(!0===a(e)?!0===r?(M(K(C,e),C,e),X(e)):(X(e),j()):q(6482,"Invalid value passed to the position method.",e)))},E.resize=function(){d=function(){var e=parseInt(f.width(),10);if(!e||e<=0)return 0;for(var r=e-1;r%8!=0&&r>0;)r--;return r/8}(),p.css("width",8*d+"px"),c.css({height:d,width:d}),!0===u.sparePieces&&f.find("."+w.sparePieces).css("paddingLeft",d+P+"px"),W()},E.start=function(e){E.position("start",e)},!0===function(){if("string"==typeof e){if(""===e)return window.alert("ChessBoard Error 1001: The first argument to ChessBoard() cannot be an empty string.\n\nExiting..."),!1;var r=document.getElementById(e);if(!r)return window.alert('ChessBoard Error 1002: Element with id "'+e+'" does not exist in the DOM.\n\nExiting...'),!1;f=$(r)}else if(1!==(f=$(e)).length)return window.alert("ChessBoard Error 1003: The first argument to ChessBoard() must be an ID or a single DOM node.\n\nExiting..."),!1;return window.JSON&&"function"==typeof JSON.stringify&&"function"==typeof JSON.parse?(window.$,!(!$.fn||!$.fn.jquery||1!=(t=$.fn.jquery,n="1.7.0",t=k(t),n=k(n),1e4*t.major*1e4+1e4*t.minor+t.patch>=1e4*n.major*1e4+1e4*n.minor+n.patch))||(window.alert("ChessBoard Error 1005: Unable to find a valid version of jQuery. Please include jQuery 1.7.0 or higher on the page.\n\nExiting..."),!1)):(window.alert("ChessBoard Error 1004: JSON does not exist. Please include a JSON polyfill.\n\nExiting..."),!1);var t,n}()&&1==("string"!=typeof u&&!0!==a(u)||(u={position:u}),"black"!==u.orientation&&(u.orientation="white"),S=u.orientation,!1!==u.showNotation&&(u.showNotation=!0),!0!==u.draggable&&(u.draggable=!1),"trash"!==u.dropOffBoard&&(u.dropOffBoard="snapback"),!0!==u.sparePieces&&(u.sparePieces=!1),!0===u.sparePieces&&(u.draggable=!0),(!0!==u.hasOwnProperty("pieceTheme")||"string"!=typeof u.pieceTheme&&"function"!=typeof u.pieceTheme)&&(u.pieceTheme="img/chesspieces/wikipedia/{piece}.png"),!0===u.hasOwnProperty("appearSpeed")&&!0===I(u.appearSpeed)||(u.appearSpeed=200),!0===u.hasOwnProperty("moveSpeed")&&!0===I(u.moveSpeed)||(u.moveSpeed=200),!0===u.hasOwnProperty("snapbackSpeed")&&!0===I(u.snapbackSpeed)||(u.snapbackSpeed=50),!0===u.hasOwnProperty("snapSpeed")&&!0===I(u.snapSpeed)||(u.snapSpeed=25),!0===u.hasOwnProperty("trashSpeed")&&!0===I(u.trashSpeed)||(u.trashSpeed=100),!0===u.hasOwnProperty("position")&&("start"===u.position?C=A(y):!0===o(u.position)?C=i(u.position):!0===a(u.position)?C=A(u.position):q(7263,"Invalid value passed to config.position.",u.position)),!0)&&(function(){var e;!function(){for(var e=0;e<r.length;e++)for(var t=1;t<=8;t++){var n=r[e]+t;x[n]=n+"-"+T()}var o="KQRBNP".split("");for(e=0;e<o.length;e++){var a="w"+o[e],i="b"+o[e];_[a]=a+"-"+T(),_[i]=i+"-"+T()}}(),f.html((e='<div class="'+w.chessboard+'">',!0===u.sparePieces&&(e+='<div class="'+w.sparePieces+" "+w.sparePiecesTop+'"></div>'),e+='<div class="'+w.board+'"></div>',!0===u.sparePieces&&(e+='<div class="'+w.sparePieces+" "+w.sparePiecesBottom+'"></div>'),e+"</div>")),p=f.find("."+w.board),!0===u.sparePieces&&(l=f.find("."+w.sparePiecesTop),h=f.find("."+w.sparePiecesBottom));var t=T();$("body").append(R("wP",!0,t)),c=$("#"+t),P=parseInt(p.css("borderLeftWidth"),10),E.resize()}(),$("body").on("mousedown mousemove","."+w.piece,Z),p.on("mousedown","."+w.square,ee),f.on("mousedown","."+w.sparePieces+" ."+w.piece,te),p.on("mouseenter","."+w.square,ue).on("mouseleave","."+w.square,fe),!0===(navigator&&navigator.userAgent&&-1!==navigator.userAgent.search(/MSIE/))?(document.ondragstart=function(){return!1},$("body").on("mousemove",oe).on("mouseup",ie)):$(window).on("mousemove",oe).on("mouseup",ie),"ontouchstart"in document.documentElement==1&&(p.on("touchstart","."+w.square,re),f.on("touchstart","."+w.sparePieces+" ."+w.piece,ne),$(window).on("touchmove",ae).on("touchend",se))),E};u.fenToObj=i,u.objToFen=s,e.exports=u}},r={};function t(n){var o=r[n];if(void 0!==o)return o.exports;var a=r[n]={exports:{}};return e[n](a,a.exports,t),a.exports}(()=>{"use strict";var e=t(437),r=t(456),n=function(){function e(e){this.state=new a(e.board),this.state.score=e.score,this.state.visitCount=e.visitCount}return e.prototype.clone=function(){var r=new e(this.state);return r.parent=this.parent,r.children=this.children,r},e.prototype.getRandomChildNode=function(){return this.children[Math.random()*this.children.length>>0]},e.prototype.getChildWithMaxScore=function(){return this.children.reduce((function(e,r){return e.state.score>r.state.score?e:r}))},e}(),o=function(){},a=function(){function r(e){this.player="",this.visitCount=0,this.score=0,this.board=e,this.player=e.turn()}return r.prototype.getAllPossibleStates=function(){var t,n=this;return this.board.moves().forEach((function(o){n.board.move(o),t.push(new r(new e.Chess(n.board.fen()))),n.board.undo()})),t},r.prototype.incrementVisit=function(){this.visitCount++},r.prototype.togglePlayer=function(){this.player=this.getOpponent()},r.prototype.randomPlay=function(){},r.prototype.getOpponent=function(){return"b"===this.player?"b":"w"},r.prototype.evaluateBoard=function(){var e=this.board.fen(),r=0;if(this.board.in_checkmate())return 1e5*("b"===this.board.turn()?-1:1);for(var t=0;" "!=e.charAt(t);)r+=this.getPieceValue(e.charAt(t).toLowerCase())*this.checkCase(e.charAt(t)),t++;return r},r.prototype.getPieceValue=function(e){switch(e){case"p":return 1;case"r":return 5;case"n":case"b":return 3;case"q":return 9;case"k":return 20;default:return 0}},r.prototype.checkCase=function(e){var r=e.toUpperCase();return e.toLowerCase()===r?0:e===r?1:-1},r}(),i=function(){function e(){}return e.uctValue=function(e,r,t){return 0==t?Number.MAX_VALUE:r/t+1.41*Math.sqrt(Math.log(e)/t)},e.findBestNodeWithUCT=function(e){var r=e.state.visitCount;return e.children.reduce((function(e,t){return this.uctValue(r,e.state.score,e.state.visitCount)>this.uctValue(r,t.state.score,t.state.visitCount)?e:t}))},e}(),s=function(){function e(){this.WIN_SCORE=10,this.level=0,this.opponent=""}return e.prototype.findNextMove=function(e,r){var t=(new Date).getTime()+3e3,n=new o,a=n.rootNode;for(a.state.board=e,a.state.player=r;(new Date).getTime()<t;){var i=this.selectPromisingNode(a);i.state.board.game_over()||this.expandNode(i);var s=i;i.children.length>0&&(s=i.getRandomChildNode());var u=this.simulateRandomPlayout(s);this.backPropagation(s,u)}var f=a.getChildWithMaxScore();return n.rootNode=f,f.state.board},e.prototype.selectPromisingNode=function(e){for(var r=e;0!=r.children.length;)r=i.findBestNodeWithUCT(r);return r},e.prototype.expandNode=function(e){e.state.getAllPossibleStates().forEach((function(r){var t=new n(r);t.parent=e,t.state.player=e.state.getOpponent(),e.children.push(t)}))},e.prototype.backPropagation=function(e,r){for(var t=e;null!=t;)t.state.incrementVisit(),t.state.evaluateBoard(),t=t.parent},e.prototype.simulateRandomPlayout=function(e){var r=e.clone(),t=r.state,n=t.board.turn();if(t.board.game_over()&&t.board.turn()==e.state.getOpponent())return r.parent.state.score=Number.MIN_VALUE,n;for(;!t.board.game_over();)t.togglePlayer(),t.randomPlay(),n=t.board.turn();return n},e}(),u=function(e,r,t,n){return new(t||(t=Promise))((function(o,a){function i(e){try{u(n.next(e))}catch(e){a(e)}}function s(e){try{u(n.throw(e))}catch(e){a(e)}}function u(e){var r;e.done?o(e.value):(r=e.value,r instanceof t?r:new t((function(e){e(r)}))).then(i,s)}u((n=n.apply(e,r||[])).next())}))},f=function(e,r){var t,n,o,a,i={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return a={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function s(a){return function(s){return function(a){if(t)throw new TypeError("Generator is already executing.");for(;i;)try{if(t=1,n&&(o=2&a[0]?n.return:a[0]?n.throw||((o=n.return)&&o.call(n),0):n.next)&&!(o=o.call(n,a[1])).done)return o;switch(n=0,o&&(a=[2&a[0],o.value]),a[0]){case 0:case 1:o=a;break;case 4:return i.label++,{value:a[1],done:!1};case 5:i.label++,n=a[1],a=[0];continue;case 7:a=i.ops.pop(),i.trys.pop();continue;default:if(!((o=(o=i.trys).length>0&&o[o.length-1])||6!==a[0]&&2!==a[0])){i=0;continue}if(3===a[0]&&(!o||a[1]>o[0]&&a[1]<o[3])){i.label=a[1];break}if(6===a[0]&&i.label<o[1]){i.label=o[1],o=a;break}if(o&&i.label<o[2]){i.label=o[2],i.ops.push(a);break}o[2]&&i.ops.pop(),i.trys.pop();continue}a=r.call(e,i)}catch(e){a=[6,e],n=0}finally{t=o=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,s])}}},p=null,c=new e.Chess,l=new s,h={draggable:!0,position:"start",onMouseoutSquare:function(e,r){d()},onMouseoverSquare:function(e,r){var t=c.moves({square:e,verbose:!0});if(0!==t.length){v(e);for(var n=0;n<t.length;n++)v(t[n].to)}},onDragStart:function(e,r,t,n){return!c.game_over()&&(-1===r.search(/^b/)&&void 0)},onDrop:function(e,r){return u(this,void 0,void 0,(function(){return f(this,(function(t){switch(t.label){case 0:return d(),null===c.move({from:e,to:r,promotion:"q"})?[2,"snapback"]:[4,g()];case 1:return t.sent(),[2]}}))}))},onSnapEnd:function(){p.position(c.fen())}};function d(){$("#myBoard .square-55d63").css("background","")}function v(e){var r=$("#myBoard .square-"+e),t="#a9a9a9";r.hasClass("black-3c85d")&&(t="#696969"),r.css("background",t)}function g(){return u(this,void 0,void 0,(function(){var r;return f(this,(function(t){return r="https://explorer.lichess.ovh/lichess?variant=standard&speeds=blitz,rapid,classical&fen=".concat(c.fen()),fetch(r,{}).then((function(e){return e.json()})).then((function(r){if(0!=r.moves.length)c.move(r.moves[0].san);else{new e.Chess(c.fen());var t=l.findNextMove(c,"b");console.log(t),c=t}})).then(p.position(c.fen())),[2]}))}))}p=(0,r.ChessBoard)("myBoard",h)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,